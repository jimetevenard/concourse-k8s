#!/bin/bash

set -e
#set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source /opt/resource/common.sh

fill() {

  case $resource_type in
    $DEPLOYMENT|$DP|$STATEFULSET|$ST)
      if [ $1 = $PRB ]; then
        echo 8
      elif [ $1 = $CMD ]; then
        echo 8
      fi
    ;;
    $MULTICONTAINERDEPLOYMENT|$MD)
      if [ $1 = $CNT ]; then
        echo 6
      fi
    ;;
    $JOB|$JB)
      if [ $1 = $CMD ]; then
        echo 6
      fi
    ;;
    $SERVICE|$SV)
    ;;
    $CONFIGMAP|$CM|$SECRET|$SE)
      if [ $1 = $CFD ]; then
        echo 2
      fi
    ;;
    $INGRESS|$IG)
    ;;
    *)
    ;;
  esac

}

parse() {
  log -l INFO "Initializing common params..."

  case $resource_type in
    $DEPLOYMENT|$DP|$STATEFULSET|$ST)
        # get image name
        image=$(jq -r .params.image_name < "$payload")
        tag=$(jq -r '.params.image_tag // "1.0"' < "$payload")
        image_pull_policy=$(jq -r '.params.image_pull_policy // "IfNotPresent"' < "$payload")
        restart_policy=$(jq -r '.params.restart_policy // "Always"' < "$payload")
        resource_request_memory=$(jq -r '.params.resource_request_memory // "512Mi"' < "$payload")
        resource_limit_memory=$(jq -r '.params.resource_limit_memory // "1Gi"' < "$payload")
        resource_request_cpu=$(jq -r '.params.resource_request_cpu // "500m"' < "$payload")
        resource_limit_cpu=$(jq -r '.params.resource_limit_cpu // "1"' < "$payload")
        env_values=$(jq -r ".params.env_values[]? | if .name and .value then (\"$(printf "%8s")\"+\"- name: \"+.name + \"\n$(printf "%10s")value: \\\"\" + .value + \"\\\"\") else empty end "  < $payload)
        readiness_probe=$(jq -r 'if .params.readiness_probe then {readinessProbe: .params.readiness_probe} else empty end' < "$payload")
        if [[ -n $readiness_probe ]]; then
          readiness_probe=$( echo $readiness_probe | j2y | awk '{printf "%"'$(fill $PRB)'"s%s\n", "", $0}' )
        fi
        command=$(jq -r 'if .params.command then {command: .params.command} else empty end' < "$payload")
        if [[ -n $command ]]; then
          command=$( echo $command | j2y | awk '{printf "%"'$(fill $CMD)'"s%s\n", "", $0}' )
        fi
        liveness_probe=$(jq -r 'if .params.liveness_probe then {livenessProbe: .params.liveness_probe} else empty end' < "$payload")
        if [[ -n $liveness_probe ]]; then
          liveness_probe=$( echo $liveness_probe | j2y | awk '{printf "%"'$(fill $PRB)'"s%s\n", "", $0}' )
        fi
        port_values=$(jq -r "if (.params.port_values | length) > 0 then .params.port_values[] | if .name and .containerPort then (\"$(printf "%8s")\"+\"- name: \"+.name + \"\n$(printf "%10s")containerPort: \" + .containerPort) else empty end else (\"$(printf "%8s")\"+\"- name: web\" + \"\n$(printf "%10s")containerPort: 8080\") end"  < $payload)
        replica=$(jq -r '.params.replica // "1"' < "$payload")
        volume_mounts=$(jq -r ".params.volumes[]? | if .name and .mountPath then (\"$(printf "%8s")\"+\"- name: \"+.name + \"\n$(printf "%10s")mountPath: \\\"\" + .mountPath + \"\\\"\") else empty end "  < $payload)
        volumes=$(jq -r ".params.volumes[]? | if .name and .config then (\"$(printf "%6s")\"+\"- name: \"+.name + \"\n$(printf "%8s")configMap: \" +  \"\n$(printf "%10s")name: \\\"\" + .config + \"\\\"\")
            elif .name and .secret then (\"$(printf "%6s")\"+\"- name: \"+.name + \"\n$(printf "%8s")secret: \" +  \"\n$(printf "%10s")secretName: \\\"\" + .secret + \"\\\"\")
            elif .name and .persistentVolume then (\"$(printf "%6s")\"+\"- name: \"+.name + \"\n$(printf "%8s")persistentVolumeClaim: \" +  \"\n$(printf "%10s")claimName: \\\"\" + .persistentVolume + \"\\\"\")
            elif .name then (\"$(printf "%6s")\"+\"- name: \"+.name + \"\n$(printf "%8s")emptyDir: {}\")
            else empty end "  < $payload)

        if [[ ($resource_type = $STATEFULSET) || ($resource_type = $ST) ]]; then
            service_name=$(jq -r '.params.service_name // ""' < "$payload")
            volume_name=$(jq -r '.params.volume_name // ""' < "$payload")
            storage_class_name=$(jq -r '.params.storage_class_name // ""' < "$payload")
            storage_volume=$(jq -r '.params.storage_volume // "1Gi"' < "$payload")
            storage_access_mode=$(jq -r '.params.storage_access_mode // "ReadWriteOnce"' < "$payload")
        fi
    ;;
    $MULTICONTAINERDEPLOYMENT|$MD)
        # parse containers info
        replica=$(jq -r '.params.replica // "1"' < "$payload")
        init_containers=$( echo $(jq -r .params.init_containers < "$payload") | j2y | awk '{printf "%"'$(fill $CNT)'"s%s\n", "", $0}' )
        main_containers=$( echo $(jq -r .params.main_containers < "$payload") | j2y | awk '{printf "%"'$(fill $CNT)'"s%s\n", "", $0}' )
    ;;
    $JOB|$JB)
        # get image name
        image=$(jq -r .params.image_name < "$payload")
        tag=$(jq -r '.params.image_tag // "1.0"' < "$payload")
        image_pull_policy=$(jq -r '.params.image_pull_policy // "IfNotPresent"' < "$payload")
        restart_policy=$(jq -r '.params.restart_policy // "Always"' < "$payload")
        env_values=$(jq -r ".params.env_values[]? | if .name and .value then (\"$(printf "%8s")\"+\"- name: \"+.name + \"\n$(printf "%10s")value: \\\"\" + .value + \"\\\"\") else empty end "  < $payload)
        command=$(jq -r 'if .params.command then {command: .params.command} else empty end' < "$payload")
        if [[ -n $command ]]; then
          command=$( echo $command | j2y | awk '{printf "%"'$(fill $CMD)'"s%s\n", "", $0}' )
        fi
    ;;
    $SERVICE|$SV)
        port_values=$(jq -r ".params.port_values[]? | if .name and .port then (\"$(printf "%2s")\"+\"- name: \"+.name + \"\n$(printf "%4s")port: \"  + .port) else empty end "  < $payload)
        expose_type=$(jq -r '.params.expose_type // "ClusterIP"' < "$payload")
        cluster_ip=$(jq -r "if .params.stateful == true then (\"$(printf "%2s")\"+\"clusterIP: \"+\"None\") else empty end "  < $payload)
    ;;
    $CONFIGMAP|$CM|$SECRET|$SE)
        config_data=$(jq -r '.params.config_data // ""' < "$payload")
        if [[ -n $config_data ]]; then
          config_data=$( echo $config_data | j2y | awk '{printf "%"'$(fill $CFD)'"s%s\n", "", $0}' )
        fi
    ;;
    $INGRESS|$IG)
        service_port=$(jq -r '.params.service_port' < "$payload")
        host=$(jq -r '.params.host' < "$payload")
        ingress_class=$(jq -r '.params.ingress_class // "ingress"' < "$payload")
        path=$(jq -r '.params.path // "/"' < "$payload")
    ;;
    *)
        die "Not yet supported"
    ;;
  esac

  log -l INFO "Common params initialization successful"
}


validate() {
  log -l INFO "Validating params of \"$resource_type\" object..."

  case $resource_type in
    $DEPLOYMENT|$DP|$JOB|$JB|$STATEFULSET|$ST)
      [[ -z $image ]] && { die $resource_type "Missing container image"; }
      if [[ ($resource_type = $STATEFULSET) || ($resource_type = $ST) ]]; then
        [[ -z $service_name ]] && { die $resource_type "Missing service name"; }
        [[ -z $volume_name ]] && { die $resource_type "Missing volume name"; }
        [[ -z $storage_class_name ]] && { die $resource_type "Missing storage class name"; }
      fi
    ;;
    $MULTICONTAINERDEPLOYMENT|$MD)
      [[ -z $init-containers && -z $main-containers ]] && { die $resource_type "Missing container info. Either provide initContainers or containers details"; }
      declare -a arr=("init-containers" "main-containers")
      for j in "${arr[@]}"
      do
        if [[ -n "$(echo $j)" ]]; then
          len=$(jq -r --arg inp "$j" '.[$inp] | length' < "$payload")
          for i in $(seq 0 $(expr $len - 1))
          do
            [[ -z $(jq -r --arg outer "$j" --argjson inner "$i" '.[$outer][$inner].name' < "$payload") ]] && { die $resource_type "Missing ${j} image name at [$i]"; }
            [[ -z $(jq -r --arg outer "$j" --argjson inner "$i" '.[$outer][$inner].image' < "$payload") ]] && { die $resource_type "Missing ${j} image at [$i]"; }
          done
        fi
      done
    ;;
    $SERVICE|$SV)
      [[ -z $port_values ]] && { die $resource_type "Missing expose port values"; }
    ;;
    $CONFIGMAP|$CM|$SECRET|$SE)
      [[ -z $config_data ]] && { die $resource_type "Missing config data"; }
    ;;
    $INGRESS|$IG)
      [[ -z $service_port ]] && { die $resource_type "Missing service expose port"; }
      [[ -z $host ]] && { die $resource_type "Missing host path"; }
    ;;
    *)
    ;;
  esac

  log -l INFO "Validation of \"$resource_type\" object successful"
}

apply() {

  log -l INFO "Applying changes of \"$resource_type\"..."

  case $resource_type in
    $DEPLOYMENT|$DP)
       template="$(cat $TEMPLATE/Deployment.yml)"
       k8sapply "deploy"
       log -l INFO "Deployment object successfully initialized"
    ;;
    $MULTICONTAINERDEPLOYMENT|$MD)
       template="$(cat $TEMPLATE/MultiContainerDeployment.yml)"
       k8sapply
       log -l INFO "Deployment object with multiple containers successfully initialized"
    ;;
    $STATEFULSET|$ST)
       template="$(cat $TEMPLATE/StatefulSet.yml)"
       k8sapply "deploy"
       log -l INFO "StatefulSet object successfully initialized"
    ;;
    $JOB|$JB)
       template="$(cat $TEMPLATE/Job.yml)"
       k8sapply "job"
       log -l INFO "Job object successfully initialized"
    ;;
    $SERVICE|$SV)
       template="$(cat $TEMPLATE/Service.yml)"
       k8sapply "svc"
       log -l INFO "Service object successfully initialized"
    ;;
    $CONFIGMAP|$CM)
       template="$(cat $TEMPLATE/ConfigMap.yml)"
       k8sapply "cm"
       log -l INFO "ConfigMap object successfully created"
    ;;
    $SECRET|$SE)
       template="$(cat $TEMPLATE/Secret.yml)"
       k8sapply "secret"
       log -l INFO "Secret object successfully created"
    ;;
    $INGRESS|$IG)
       template="$(cat $TEMPLATE/Ingress.yml)"
       k8sapply "ingress"
       log -l INFO "Ingress object successfully initialized"
    ;;
    *)
    ;;
  esac

  log -l INFO "\"$resource_type\" changes applied successfully"
}

k8sapply(){

  if [ $APPLY = "Y" ]; then
    eval "echo \"${template}\"" | sed '/^$/d' | kubectl apply -f -
    case $resource_type in
      $DEPLOYMENT|$DP|$STATEFULSET|$ST|$JOB|$JB)
        result="$(jq -n "{version:{container:\"$image:$tag\", ref:$(kubectl get $1/${resource_name} -n ${namespace} -o json | jq .metadata.resourceVersion)}}")"
      ;;
      $SERVICE|$SV|$CONFIGMAP|$CM|$SECRET|$SE|$INGRESS|$IG)
        result="$(jq -n "{version:{ref:$(kubectl get $1/${resource_name} -n ${namespace} -o json | jq .metadata.resourceVersion)}, buildId: \"$BUILD_ID\"}")"
      ;;
      $MULTICONTAINERDEPLOYMENT|$MD)
        result="$(jq -n "{version:{ref:$(kubectl get $1/${resource_name} -n ${namespace} -o json | jq .metadata.resourceVersion)}}")"
      ;;
      *)
        result="$(jq -n "{\"version\":{\"ref\": \"none\"}}")"
      ;;
    esac
  else
    eval "echo \"${template}\"" | sed '/^$/d' | kubectl apply --dry-run=true --validate=true -f -
  fi

}

#initialize constants
TEMPLATE="/opt/resource/templates"
APPLY=Y

#initialize other constants
PRB=pb
CMD=cmd
CFD=cfd
CNT=cnt

# Read inputs
source=$1
payload=$(mktemp k8s-resource-request.XXXXXX)
cat > $payload <&0

# Prepare
initialize $payload $source

log -l INFO "Parsing parameters"
# Parse parameters
resource_type=$(echo $(jq -r '.params.resource_type // ""' < "$payload") | awk '{print tolower($0)}')

if [[ -z "$resource_type" ]]; then
    resource_type=$(echo $(jq -r '.source.resource_type // ""' < "$payload") | awk '{print tolower($0)}')
fi

[[ -z $resource_type ]] && { die "Missing resource type"; }

resource_name=$(jq -r '.params.resource_name // ""' < "$payload")
if [[ -z "$resource_name" ]]; then
    resource_name=$(jq -r '.source.resource_name // ""' < "$payload")
fi

[[ -z $resource_name  ]] && { die $resource_type "Missing resource name"; }

container_name=$(jq -r '.source.container_name // ""' < "$payload")
if [[ -z "$container_name" ]]; then
  container_name=$resource_name
fi

namespace=$(jq -r '.params.namespace // ""' < $payload)
if [[ -z "$namespace" ]]; then
    namespace=$(jq -r '.source.namespace // "default"' < "$payload")
fi

parse
validate
apply

echo "$result" | jq -s add  >&3